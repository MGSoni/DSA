//Wrong Solution
class Solution {
    public int findKthLargest(int[] nums, int k) {
       
       int index = quickSelect(nums,k,0,nums.length-1);
       return nums[index];

    }

    private int partition(int l, int r, int[] nums){
        int pivot = r;
        r--;
        while(l<=r){
            if(nums[l]<=nums[pivot]){
                l++;
            }else if(nums[r]>nums[pivot]){
                r--;
            }else{
                int temp=nums[r];
                nums[r]=nums[l];
                nums[l]=temp;
                l++;
                r--;
            }
        }
        int temp=nums[r+1];
        nums[r+1]=nums[pivot];
        nums[pivot]=temp;

        return r+1;
                
    }

    private int quickSelect(int[] nums, int k, int l, int r){

        int pivot = partition(l,r,nums);
        //System.out.println(pivot);
        if(nums.length-k==pivot){
            return pivot;
        }else if(k<pivot){
            return quickSelect(nums,k,pivot+1,r);
        }else{
            return quickSelect(nums,k,l,pivot-1);
        }

    }

}
